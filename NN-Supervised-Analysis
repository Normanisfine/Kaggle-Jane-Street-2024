{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10111950,"sourceType":"datasetVersion","datasetId":6238476},{"sourceId":10111972,"sourceType":"datasetVersion","datasetId":6238494}],"dockerImageVersionId":30804,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Neural Network Notebook","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport torch\nfrom torch.utils.data import Dataset, DataLoader, random_split, TensorDataset\nimport torch.nn as nn\nimport torch.optim as optim\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nimport matplotlib.pyplot as plt","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Requirements / General Notes:\n#### - Try Different Feature Transformations (PCA, ... etc.)\n#### - Try Different Model Architecutres (Going to try 3 different model architectures)\n#### - Try Different Regulariztions (6 Different values for each model)\n#### - Different sybmol ID represent different securities\n#### - Time series data, so Date ID is important","metadata":{}},{"cell_type":"code","source":"# configs\npd.set_option('display.max_columns', None) \npd.set_option('display.max_rows', 100)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Data Imports (Data Already Scaled & Normalized Thanks MJ :) )","metadata":{}},{"cell_type":"code","source":"train_val_df = pd.read_csv('/kaggle/input/test-df-sn-js2024/df_test_scaled_normalized.csv')\ntest_df = pd.read_csv('/kaggle/input/tr-val-sn-js2024/df_miss_outliers_replaced_scaled_normalized.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-06T00:32:08.755368Z","iopub.execute_input":"2024-12-06T00:32:08.756054Z","iopub.status.idle":"2024-12-06T00:32:26.566715Z","shell.execute_reply.started":"2024-12-06T00:32:08.756003Z","shell.execute_reply":"2024-12-06T00:32:26.565657Z"}},"outputs":[],"execution_count":2},{"cell_type":"markdown","source":"## Data preparation for training and validation","metadata":{}},{"cell_type":"code","source":"\n#Splitting features and targets\ntrain_val_features = train_val_df.drop(columns=['responder_6']).values\ntrain_val_target = train_val_df['responder_6'].values\n\n#Converting them into torch tensors\nX_tensor = torch.tensor(X, dtype=torch.float32)\ny_tensor = torch.tensor(y, dtype=torch.float32).unsqueeze(1)  ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-06T00:32:26.716608Z","iopub.execute_input":"2024-12-06T00:32:26.716957Z","iopub.status.idle":"2024-12-06T00:32:37.164877Z","shell.execute_reply.started":"2024-12-06T00:32:26.716923Z","shell.execute_reply":"2024-12-06T00:32:37.163534Z"}},"outputs":[{"name":"stdout","text":"Total dataset size: 471486\nTraining dataset size: 377188\nValidation dataset size: 94298\nTraining batch - Inputs: torch.Size([32, 91]) Targets: torch.Size([32, 1])\nValidation batch - Inputs: torch.Size([32, 91]) Targets: torch.Size([32, 1])\n","output_type":"stream"}],"execution_count":5},{"cell_type":"markdown","source":"### Custom Dataset Class\n#### Was having issues with using X and y as pure torchTesnors, so I created a custom dataset class","metadata":{}},{"cell_type":"code","source":"class TimeSeriesDataset(Dataset): #Took a minute, but apparently it must inherit from the PyTorch \"Abstract Dataset Class\"\n    def __init__(self, features, target):\n        self.features = features\n        self.target = target\n\n    def __len__(self):\n        return len(self.features)\n\n    def __getitem__(self, idx):\n        return self.features[idx], self.target[idx]\n\ndataset = TimeSeriesDataset(X_tensor, y_tensor)\n\ntrain_ratio = 0.8  # 80% for training, 20% for validation\ntrain_size = int(len(dataset) * train_ratio)\nval_size = len(dataset) - train_size\ntrain_dataset, val_dataset = random_split(dataset, [train_size, val_size]) #Splits the data dandomly \n\n# Using Pytorch DataLoaders - It is a must for using PyToech\nbatch_size = 32\ntrain_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\nval_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)\n\n# Printing dataset sizes \nprint(\"Total dataset size: \", len(dataset))\nprint(\"Training dataset size: \", len(train_dataset))\nprint(\"Validation dataset size: len(val_dataset)\", len(val_dataset))\n\nfor batch in train_loader:\n    inputs, targets = batch\n    print(\"Training batch - Inputs:\", inputs.shape, \"Targets:\", targets.shape)\n    break\n\nfor batch in val_loader:\n    inputs, targets = batch\n    print(\"Validation batch - Inputs:\", inputs.shape, \"Targets:\", targets.shape)\n    break","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-06T02:36:44.273023Z","iopub.execute_input":"2024-12-06T02:36:44.273592Z","iopub.status.idle":"2024-12-06T02:36:44.425485Z","shell.execute_reply.started":"2024-12-06T02:36:44.273519Z","shell.execute_reply":"2024-12-06T02:36:44.424395Z"}},"outputs":[{"name":"stdout","text":"Total dataset size:  471486\nTraining dataset size:  377188\nValidation dataset size: len(val_dataset) 94298\nTraining batch - Inputs: torch.Size([32, 91]) Targets: torch.Size([32, 1])\nValidation batch - Inputs: torch.Size([32, 91]) Targets: torch.Size([32, 1])\n","output_type":"stream"}],"execution_count":9},{"cell_type":"markdown","source":"## Multi-Layer Perceptron Architecture","metadata":{}},{"cell_type":"code","source":"class MLP(nn.Module):\n    def __init__(self, input_dim, hidden_units=[128, 64], output_dim=1):\n        super(MLP, self).__init__()\n        self.fc1 = nn.Linear(input_dim, hidden_units[0])\n        self.fc2 = nn.Linear(hidden_units[0], hidden_units[1])\n        self.fc3 = nn.Linear(hidden_units[1], output_dim)\n        self.relu = nn.ReLU()\n        self.dropout = nn.Dropout(0.2)\n\n    def forward(self, x):\n        x = self.relu(self.fc1(x))\n        x = self.dropout(x)\n        x = self.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\n\n# Initialize the model\ninput_dim = X.shape[1]  # Number of features\nmodel = MLP(input_dim)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-06T02:45:50.404071Z","iopub.execute_input":"2024-12-06T02:45:50.404572Z","iopub.status.idle":"2024-12-06T02:45:50.415661Z","shell.execute_reply.started":"2024-12-06T02:45:50.404513Z","shell.execute_reply":"2024-12-06T02:45:50.414374Z"}},"outputs":[],"execution_count":10},{"cell_type":"markdown","source":"## Model Training","metadata":{}},{"cell_type":"code","source":"%%time\n\ndef train_model(num_epochs, data_loader, lambda_):\n\n    #Opting for a the adam optimizer, may switch it up, depending on time constraints\n    #Also, going with the Mean-Squard error for measuring loss\n    \n    optimizer = optim.Adam(model.parameters(), lr=0.001, weight_decay=lambda_)\n    criterion = nn.MSELoss() \n    \n    losses = []\n    for epoch in range(num_epochs):\n        model.train()\n        running_loss = 0.0\n        for batch in data_loader:\n            inputs, targets = batch\n\n            # Forward pass\n            outputs = model(inputs)\n            loss = criterion(outputs, targets)\n\n            # Backward pass and optimization\n            optimizer.zero_grad()\n            loss.backward()\n            optimizer.step()\n\n            running_loss += loss.item()\n\n        print(f\"Epoch [{epoch+1}/{num_epochs}], Loss: {running_loss/len(data_loader):.4f}\")\n        losses.append(running_loss/len(data_loader))\n\n\nnum_epochs = 5\nlambda_ = 1e-4\ntrain_model(num_epochs, train_loader, lambda_)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-06T02:56:21.985512Z","iopub.execute_input":"2024-12-06T02:56:21.985977Z","iopub.status.idle":"2024-12-06T03:00:35.086211Z","shell.execute_reply.started":"2024-12-06T02:56:21.985940Z","shell.execute_reply":"2024-12-06T03:00:35.085292Z"}},"outputs":[{"name":"stdout","text":"Epoch [1/5], Loss: 0.2233\nEpoch [2/5], Loss: 0.1996\nEpoch [5/5], Loss: 0.1759\nCPU times: user 8min 24s, sys: 1.4 s, total: 8min 25s\nWall time: 4min 13s\n","output_type":"stream"}],"execution_count":12},{"cell_type":"markdown","source":"## Model Evaluation","metadata":{}},{"cell_type":"code","source":"\ndef evaluate_model(model, dataloader, criterion):\n    model.eval()  # Set the model to evaluation mode\n    predictions = []\n    targets = []\n    total_loss = 0.0\n    \n    with torch.no_grad():  # Disabling gradent calculation\n        for inputs, labels in dataloader:\n            # Forward pass\n            outputs = model(inputs)\n            loss = criterion(outputs, labels)\n            total_loss += loss.item()\n            \n            # Store predictions and targets\n            predictions.append(outputs.cpu().numpy())\n            targets.append(labels.cpu().numpy())\n    \n    \n    # Combine all predictions and targets\n    predictions = np.vstack(predictions)\n    targets = np.vstack(targets)\n    \n    # Metrics for calculated on the validation set\n    mse = mean_squared_error(targets, predictions)  # Mean-Squared Error\n    mae = mean_absolute_error(targets, predictions) # Mean-Aboslute Error \n    r2 = r2_score(targets, predictions)             # R2 Score\n    \n    # Average loss\n    avg_loss = total_loss / len(dataloader)\n    \n    metrics = {\n        \"Loss (MSE)\": avg_loss,\n        \"Mean Squared Error\": mse,\n        \"Mean Absolute Error\": mae,\n        \"R2 Score\": r2,\n    }\n    \n    return metrics, predictions, targets\n\n\n#criterion = torch.nn.MSELoss()\n\nmetrics, predictions, targets = evaluate_model(model, val_loader, criterion)\n\nprint(\"Evaluation Metrics:\")\nfor metric, value in metrics.items():\n    print(f\"{metric}: {value:.4f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-06T03:11:55.965855Z","iopub.execute_input":"2024-12-06T03:11:55.966194Z","iopub.status.idle":"2024-12-06T03:12:02.634801Z","shell.execute_reply.started":"2024-12-06T03:11:55.966159Z","shell.execute_reply":"2024-12-06T03:12:02.633735Z"}},"outputs":[{"name":"stdout","text":"Evaluation Metrics:\nLoss (MSE): 0.2279\nMean Squared Error: 0.2279\nMean Absolute Error: 0.3209\nR2 Score: 0.7146\n","output_type":"stream"}],"execution_count":14},{"cell_type":"markdown","source":"## Training Loss and Epochs Graph","metadata":{}},{"cell_type":"code","source":"\ndef plot_training_loss(losses, title=\"Training Loss vs. Epochs\"):\n    \n    epochs = range(1, len(losses) + 1)  # Epoch numbers (1-based index)\n    plt.figure(figsize=(8, 6))\n    plt.plot(epochs, losses, marker='o', label=\"Training Loss\")\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(\"Loss\")\n    plt.xticks(epochs)  # Set x-axis ticks to correspond to each epoch\n    plt.title(title)\n    plt.legend()\n    plt.grid(True)\n    plt.show()\n\n\nplot_training_loss(losses)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-06T03:12:14.988118Z","iopub.execute_input":"2024-12-06T03:12:14.988521Z","iopub.status.idle":"2024-12-06T03:12:15.259774Z","shell.execute_reply.started":"2024-12-06T03:12:14.988482Z","shell.execute_reply":"2024-12-06T03:12:15.258669Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":15},{"cell_type":"markdown","source":"#### I will run all of the tests tomorrow. This is set up nicely. Should take like 10 minutes, or more depending on how daunting the training is.","metadata":{}}]}